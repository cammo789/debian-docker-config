---
version: '3.2'
services:
  openaudible:
    container_name: openaudible
    image: lanjelin/openaudible:latest
    ports:
      - "3001:3000"
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /mnt/storage/openaudible/config:/config
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mnt/storage/readarr/config:/config
      - /mnt/storage/readarr/books:/books #optional
      - /mnt/storage/readarr/downloads:/downloads #optional
    ports:
      - 8787:8787
    restart: unless-stopped
  audiobookshelf:
    container_name: audiobookshelf
    image: ghcr.io/advplyr/audiobookshelf:latest
    environment:
      - AUDIOBOOKSHELF_UID=1000
      - AUDIOBOOKSHELF_GID=1000
    ports:
      - 13378:80
    volumes:
      - /mnt/storage/audiobookshelf/audiobooks:/audiobooks
      - /mnt/storage/audiobookshelf/podcasts:/podcasts
      - /mnt/storage/audiobookshelf/config:/config
      - /mnt/storage/audiobookshelf/metadata:/metadata
  nextcloud:
    image: lscr.io/linuxserver/nextcloud
    container_name: nextcloud
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /opt/appdata/nextcloud/config:/config
      - /mnt/storage/nextcloud/data:/data
    depends_on:
      - mariadb
    ports:
      - 444:443
    restart: unless-stopped
  mariadb:
    image: ghcr.io/linuxserver/mariadb
    container_name: mariadb
    environment:
      - PUID=1000
      - PGID=1000
      - MYSQL_ROOT_PASSWORD=camscloudissosecureyoudontevenknow
      - TZ=Europe/London
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=camuser
      - MYSQL_PASSWORD=camscloudissosecure
    volumes:
      - /opt/appdata/mariadb:/config
    restart: unless-stopped
  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /opt/appdata/heimdall:/config
    restart: unless-stopped
  doublecommander:
    image: lscr.io/linuxserver/doublecommander
    container_name: doublecommander
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /mnt/storage/doublecommander:/config
      - /:/data
    ports:
      - 3000:3000
    restart: unless-stopped
  db_recipes:
    restart: always
    image: postgres:11-alpine
    volumes:
      - /mnt/storage/recipes/postgresql:/var/lib/postgresql/data
    env_file:
      - /mnt/storage/recipes/.env
  recipes:
    restart: always
    image: vabene1111/recipes
    env_file:
    - /mnt/storage/recipes/.env
    volumes:
      - /mnt/storage/recipes/static:/opt/recipes/staticfiles
      # - nginx_config:/opt/recipes/nginx/conf.d
      - /mnt/storage/recipes/media:/opt/recipes/mediafiles
    depends_on:
      - db_recipes
  ombi:
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - BASE_URL=/ombi #optional
    volumes:
      - /opt/appdata/ombi:/config
    ports:
      - 3579:3579
    restart: unless-stopped
  # paperless:
  #   image: lscr.io/linuxserver/paperless-ngx:latest
  #   container_name: paperless
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=America/New_York
  #     # - PAPERLESS_URL=https://paperless.cconable.com
  #     # OPTIONAL
  #     # - REDIS_URL= # optional
  #   volumes:
  #     - /mnt/storage/paperless/config:/config
  #     - /mnt/storage/paperless/data:/data
  #   ports:
  #     - 8000:8000
    # env_file: /mnt/storage/paperless/docker-compose-paperless.env
# paperless broker and db
  broker:
      image: redis:6.0
      restart: unless-stopped
      volumes:
        - /mnt/storage/paperless/redisdata:/redisdata
  db_paperless:
    image: postgres:13
    restart: unless-stopped
    volumes:
      - /mnt/storage/paperless/pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
  paperless:
    container_name: paperless
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db_paperless
      - broker
    ports:
    # port clash with gluetun
      - 8011:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - /mnt/storage/paperless/data:/usr/src/paperless/data
      - /mnt/storage/paperless/media:/usr/src/paperless/media
      - /mnt/storage/paperless/export:/usr/src/paperless/export
      - /mnt/storage/paperless/consume:/usr/src/paperless/consume
      # - /mnt/storage/nextcloud/data/camcl0ud/files:/usr/src/paperless/consume
    env_file: /mnt/storage/paperless/docker-compose-paperless.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db_paperless
  authelia:
    image: authelia/authelia:4.21.0
    container_name: authelia
    environment:
      - TZ=America/New_York
      - PUID=1000
      - PGID=1000
    volumes:
      - /opt/appdata/authelia:/config
    restart: unless-stopped
  metube:
    image: alexta69/metube
    container_name: metube
    restart: unless-stopped
    # user: "1000:1000"
    environment:
      - PUID=1000
      - PGID=1000
    ports:
      - "8081:8081"
    volumes:
      - /mnt/storage/metube/downloads:/downloads
  calibre-web:
    image: lscr.io/linuxserver/calibre-web
    container_name: calibre
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #optional
      # - PASSWORD= 123654789camcalibre
      # - CLI_ARGS= #optional
    volumes:
      - /opt/appdata/calibre/config:/config
      - /mnt/storage/calibre/data:/data
    ports:
      - 8083:8083
    restart: unless-stopped
  syncthing:
    image: lscr.io/linuxserver/syncthing
    container_name: syncthing
    #hostname: syncthing #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /opt/appdata/syncthing/config:/config
      - /mnt/storage:/data
      # - /mnt/storage/nextcloud:/nextcloud
      # - /mnt/storage/misc/workout:/workout
    ports:
      - 8384:8384 # Web UI
      - 22000:22000/tcp # TCP file transfers
      - 22000:22000/udp # QUIC file transfers
      - 21027:21027/udp # Receive local discovery broadcasts
    restart: unless-stopped
  gluetun:
# https://github.com/qdm12/gluetun/wiki/Mullvad
# https://www.youtube.com/watch?v=mH7J_2JKNK0
    image: qmcgaw/gluetun
    cap_add:
      - NET_ADMIN
    ports:
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
      #test add deluge port
      - 8112:8112
      - 6881:6881
      - 6881:6881/udp
      #specify port 8000 for testing
      # commenting out due to port conflict with paperless 20220510
      # - 8000:8000
    volumes:
      - /opt/appdata/gluetun:/config
    environment:
      # See https://github.com/qdm12/gluetun/wiki
      - VPNSP=mullvad
      - VPN_TYPE=openvpn
      # OpenVPN:
      - OPENVPN_USER=3428543284587563
      - OPENVPN_PASSWORD=NKHJhMNx9G8qmBa4
      - EXTRA_SUBNETS=192.168.1.0/24
      # Wireguard:
      # - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=
      # - WIREGUARD_ADDRESS=10.64.222.21/32
      # Timezone for accurate log times
      - TZ=Europe/London
  deluge:
    image: lscr.io/linuxserver/deluge
    network_mode: "service:gluetun"
    container_name: deluge
    environment:
      - UMASK=022
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - DELUGE_LOGLEVEL=error #optional
    volumes:
      - /mnt/disk1/downloads:/downloads
#      - /mnt/storage/movies:/movies
#      - /mnt/storage/tv:/tv
      - /opt/appdata/deluge:/config
    #routing through gluetin so these ports are unnecessary
#    ports:
#      - 8112:8112
#      - 6881:6881
#      - 6881:6881/udp
#    restart: unless-stopped
  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    environment:
#      - PUID=1000
#      - PGID=1000
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Europe/London
      - AUTO_UPDATE=true #optional
  #    - RUN_OPTS=<run options here> #optional
    volumes:
      - /opt/appdata/jackett:/config
      - /mnt/disk1/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /opt/appdata/radarr:/config
      - /mnt/storage/movies:/movies
      - /mnt/disk1/downloads:/downloads
    ports:
      - 7878:7878
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    restart:
      always
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /opt/appdata/sonarr:/config
      - /mnt/storage/tv:/tv
      - /mnt/disk1/downloads:/downloads
    ports:
      - 8989:8989
    restart: always
    environment:
#      - PUID=${PUID}
#      - PGID=${PGID}
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
  swag:
  # https://github.com/linuxserver/docker-swag/issues/225 - connection refused error - delete config/etc/letsencrypt inside container then restart
    image: ghcr.io/linuxserver/swag:latest
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000 
      - TZ=Europe/London 
      - URL=cconable.com 
      # - SUBDOMAINS=www,metube,syncthing,ombi,paperless,calibre,recipes,doublecommander,heimdall,nextcloud
      - SUBDOMAINS=wildcard
      - VALIDATION=dns 
      - DOCKER_MODS=linuxserver/mods:swag-dashboard
      - DNSPLUGIN=cloudflare
    volumes:
      - /home/aptalca/appdata/swag:/config
      # For recipes (tandoor)
      - /mnt/storage/recipes/media:/media
    ports:
      - 443:443
      - 80:80 # DO NOT CHANGE - needs to be 80:80
    restart: unless-stopped
  # lazydocker:
  #   build:
  #     context: https://github.com/jesseduffield/lazydocker.git
  #     args:
  #       BASE_IMAGE_BUILDER: golang
  #       GOARCH: amd64
  #       GOARM:
  #   image: lazyteam/lazydocker
  #   container_name: lazydocker
  #   stdin_open: true
  #   tty: true
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /opt/appdata/lazydocker/config:/config